echo Verifying up to n=12
Verifying up to n=12
# note: can replace pypy3 with python3 but it is 30x slower
pypy3 verify_theory.py 12
Random 1000 samples for each 3 <= n <= 32 (exhaustive check for n <= 12)
+ 1000 samples with forced dz
n = 3
Hit cases: agree 732 disagree 1015
n = 4
Hit cases: agree 898 disagree 723
n = 5
Hit cases: agree 898 disagree 645
n = 6
Hit cases: agree 892 disagree 570
n = 7
Hit cases: agree 860 disagree 511
n = 8
Hit cases: agree 786 disagree 526
n = 9
Hit cases: agree 774 disagree 490
n = 10
Hit cases: agree 700 disagree 488
n = 11
Hit cases: agree 692 disagree 518
n = 12
Hit cases: agree 640 disagree 497
n = 13
Hit cases: agree 559 disagree 504
n = 14
Hit cases: agree 612 disagree 489
n = 15
Hit cases: agree 545 disagree 496
n = 16
Hit cases: agree 510 disagree 511
n = 17
Hit cases: agree 527 disagree 489
n = 18
Hit cases: agree 494 disagree 509
n = 19
Hit cases: agree 434 disagree 510
n = 20
Hit cases: agree 479 disagree 491
n = 21
Hit cases: agree 471 disagree 484
n = 22
Hit cases: agree 452 disagree 479
n = 23
Hit cases: agree 420 disagree 504
n = 24
Hit cases: agree 436 disagree 487
n = 25
Hit cases: agree 419 disagree 478
n = 26
Hit cases: agree 402 disagree 506
n = 27
Hit cases: agree 450 disagree 477
n = 28
Hit cases: agree 392 disagree 515
n = 29
Hit cases: agree 404 disagree 493
n = 30
Hit cases: agree 391 disagree 518
n = 31
Hit cases: agree 372 disagree 501
n = 32
Hit cases: agree 392 disagree 480
Done!

Verifying Example 1. (Incorrect [AL16] value, correction 1/2)
count our 16384
count [AL16] 32768
Exhaustive computation... this may take time (10 sec on pypy3)
count experimental 16384
Done!

Random transitions of the shape given by Proposition 6 (correction cases)
1000 samples for each 3 <= n <= 32 (exhaustive check for n <= 12)
n = 3
n = 4
n = 5
n = 6
n = 7
n = 8
n = 9
n = 10
n = 11
n = 12
n = 13
n = 14
n = 15
n = 16
n = 17
n = 18
n = 19
n = 20
n = 21
n = 22
n = 23
n = 24
n = 25
n = 26
n = 27
n = 28
n = 29
n = 30
n = 31
n = 32
Done!

Counting valid transitions
n = 2 k = 1
c0 c1 [16, 48] sum 64
n = 3 k = 1
c0 c1 [112, 336] sum 448
n = 3 k = 2
c0 c1 [112, 336] sum 448
n = 4 k = 1
c0 c1 [784, 2352] sum 3136
n = 4 k = 2
c0 c1 [784, 2352] sum 3136
n = 4 k = 3
c0 c1 [784, 2352] sum 3136
n = 5 k = 1
c0 c1 [5488, 16464] sum 21952
n = 5 k = 2
c0 c1 [5488, 16464] sum 21952
n = 5 k = 3
c0 c1 [5488, 16464] sum 21952
n = 5 k = 4
c0 c1 [5488, 16464] sum 21952
n = 6 k = 1
c0 c1 [38416, 115248] sum 153664
n = 6 k = 2
c0 c1 [38416, 115248] sum 153664
n = 6 k = 3
c0 c1 [38416, 115248] sum 153664
n = 6 k = 4
c0 c1 [38416, 115248] sum 153664
n = 6 k = 5
c0 c1 [38416, 115248] sum 153664
n = 7 k = 1
c0 c1 [268912, 806736] sum 1075648
n = 7 k = 2
c0 c1 [268912, 806736] sum 1075648
n = 7 k = 3
c0 c1 [268912, 806736] sum 1075648
n = 7 k = 4
c0 c1 [268912, 806736] sum 1075648
n = 7 k = 5
c0 c1 [268912, 806736] sum 1075648
n = 7 k = 6
c0 c1 [268912, 806736] sum 1075648
n = 8 k = 1
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 2
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 3
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 4
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 5
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 6
c0 c1 [1882384, 5647152] sum 7529536
n = 8 k = 7
c0 c1 [1882384, 5647152] sum 7529536
Done!

(Corollary 2) Computing average probability (exhaustive)
n = 2 k = 1
    average 1/4 expected 1/4
n = 3 k = 1
    average 1/7 expected 1/7
n = 3 k = 2
    average 1/7 expected 1/7
n = 4 k = 1
    average 4/49 expected 4/49
n = 4 k = 2
    average 4/49 expected 4/49
n = 4 k = 3
    average 4/49 expected 4/49
n = 5 k = 1
    average 16/343 expected 16/343
n = 5 k = 2
    average 16/343 expected 16/343
n = 5 k = 3
    average 16/343 expected 16/343
n = 5 k = 4
    average 16/343 expected 16/343
n = 6 k = 1
    average 64/2401 expected 64/2401
n = 6 k = 2
    average 64/2401 expected 64/2401
n = 6 k = 3
    average 64/2401 expected 64/2401
n = 6 k = 4
    average 64/2401 expected 64/2401
n = 6 k = 5
    average 64/2401 expected 64/2401
n = 7 k = 1
    average 256/16807 expected 256/16807
n = 7 k = 2
    average 256/16807 expected 256/16807
n = 7 k = 3
    average 256/16807 expected 256/16807
n = 7 k = 4
    average 256/16807 expected 256/16807
n = 7 k = 5
    average 256/16807 expected 256/16807
n = 7 k = 6
    average 256/16807 expected 256/16807
n = 8 k = 1
    average 1024/117649 expected 1024/117649
n = 8 k = 2
    average 1024/117649 expected 1024/117649
n = 8 k = 3
    average 1024/117649 expected 1024/117649
n = 8 k = 4
    average 1024/117649 expected 1024/117649
n = 8 k = 5
    average 1024/117649 expected 1024/117649
n = 8 k = 6
    average 1024/117649 expected 1024/117649
n = 8 k = 7
    average 1024/117649 expected 1024/117649
Done!

